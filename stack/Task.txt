0. Разобрать самостоятельно примеры на Queue в 32 презентации, посмотреть видео на ютубе про очередь (например это https://www.youtube.com/watch?v=bM4iWKcaJec, если будут нужны комментарии - пишите в лс телеграма

1.	Добавить в реализацию стека на STL-списке (<list>) метод Contains, который проверяет, содержится ли некое значение целого типа в стеке (без выгрузки и загрузки элементов). Метод возвращает true либо false.

2.	Добавить в реализацию стека на STL-списке (<list>) метод Print, который покажет  консоль все элементы от начала до конца стека (без выгрузки и загрузки элементов).

3.	Добавить в реализацию стека на списке метод PushLessValue, который добавляет в стек элемент только в том случае, если его значение меньше, чем у «верхнего» элемента.

4.	Добавить в реализацию стека на списке метод PushUnique, который добавляет в стек элемент только в том случае, если его значение уникально (ещё не содержится в стеке).

5.	Пусть имеется выражение, поддерживающее 4 вида скобок: (), [], {}, <>. Задача - проверить правильность расположения скобок в выражении. Применить при этом вашу кастомизированную версию стека. Примеры:

{(5-[3+<9>])-4} - правильное выражение
{(>5-<[3+)9]-4} - неправильное выражение

Задачу легко решить с помощью стека. Алгоритм следующий: необходимо выполнить проход по выражению слева направо. Если встречается открывающая скобка, то её нужно поместить в стек. Если встречается закрывающая скобка, то достаём элемент из стека, и поверяем форму скобки. Если формы разные или стек пуст, то это значит,  что выражение неверное. Если к концу работы программы стек оказался не пуст, то это также означает, что выражение составлено неверно.

back - возвращает последний элемент списка (без удаления из списка)
push_back - добавляет элемент в конец списка
pop_back - удаляет с конца списка без возврата значения